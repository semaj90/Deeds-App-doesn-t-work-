import fs from 'fs';
import path from 'path';

const migrationsDir = './drizzle/migrations';

if (fs.existsSync(migrationsDir)) {
	fs.readdirSync(migrationsDir).forEach(file => {
		const filePath = path.join(migrationsDir, file);
		if (file.endsWith('.sql')) {
			let content = fs.readFileSync(filePath, 'utf8');

			// Add IF NOT EXISTS to CREATE TABLE
			content = content.replace(/CREATE TABLE\s+("?\w+"?)\s+\(/g, (match, tableName) => {
				return `CREATE TABLE IF NOT EXISTS ${tableName} (`;
			});

			// Add IF NOT EXISTS to CREATE SEQUENCE
			content = content.replace(/CREATE SEQUENCE\s+("?\w+"?)/g, (match, sequenceName) => {
				return `CREATE SEQUENCE IF NOT EXISTS ${sequenceName}`;
			});

      // Remove identity/auto-increment from non-integer columns
      // This will comment out problematic lines and warn the user
      content = content.replace(/ALTER TABLE ("?\w+"?) ALTER COLUMN ("?\w+"?) ADD GENERATED BY DEFAULT AS IDENTITY[\s\S]*?;/g, (match, table, column) => {
        // Try to detect if the column is not integer (look for SET DATA TYPE text/uuid before this line)
        const prevTypeMatch = content.match(new RegExp(`ALTER TABLE ${table} ALTER COLUMN ${column} SET DATA TYPE (\\w+)`, 'i'));
        if (prevTypeMatch && !['integer', 'int', 'bigint', 'smallint'].includes(prevTypeMatch[1].toLowerCase())) {
          console.warn(`‚ö†Ô∏è  Skipping identity for non-integer column: ${table}.${column}`);
          return `-- ${match} -- Skipped: identity not allowed on non-integer columns.`;
        }
        return match;
      });

			fs.writeFileSync(filePath, content);
			console.log(`‚úÖ Patched ${file}`);
		}
	});
} else {
	console.log(`üü° Migrations directory '${migrationsDir}' not found. Skipping patch.`);
}